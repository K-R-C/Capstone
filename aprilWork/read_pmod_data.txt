#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define AMPLUTE_OFFSET		0
#define FREQUENCY_OFFSET	1

int main(void){

int pmodAmp,pmodFreq;
int fdAmp,fdFreq, ret = EXIT_FAILURE;
int fd;	
unsigned int values[2];

if((fd = open("/dev/hssi", O_RDWR)) < 0) {	//used for streaming in hssi data
		perror("open()");
		return EXIT_FAILURE;
}

ifstream pmodAmp;	//File stream for pmod1 representing amplitude (volume) values
   	
ifstream pmodFreq;	//File stream for pmod2 epresenting frequency (pitch) values

 //ofstream hssi("/dev/hssi", ios::binary);	





/*

if((fdAmp = open("/sys/bus/iio/devices/iio:device1/in_proximity_raw", O_RDONLY)) < 0) 		
    {		
        //if open() returned a negative number, it failed 
        perror("open()");
        return EXIT_FAILURE;
    }
    
if((fdFreq = open("/sys/bus/iio/devices/iio:device2/in_proximity_raw", O_RDONLY)) < 0)		// double check path 
    {		
        ///if open() returned a negative number, it failed 
        perror("open()");
        return EXIT_FAILURE;
    }

*/




while(true) 
{
     	pmodAmp.open("/sys/bus/iio/devices/iio:device1/in_proximity_raw");
	pmodAmp>>values[AMPLITUDE_OFFSET];
	pmodAmp.close();
	
	pmodFreq.open("/sys/bus/iio/devices/iio:device2/in_proximity_raw");
	pmodFreq>>values[FREQUENCTY_OFFSET];
	pmodFreq.close();
	
 	write(fd, values, sizeof(values));   		
    
    	//hssi << AMPLITUDE << Hz;
    	//hssi.flush();
    
    
   
    
    
}
    
    
    
    
    ret= EXIT_SUCCESS;
    return ret;
}
