// i am adding a comment here

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <queue>
#include <cmath>

#include <fstream>
#include <string>
#include <iostream>

#define STATUS_CONTROL_RESET			(1 << (0))
#define STATUS_CONTROL_RESET_OFFSET		(0)
#define STATUS_CONTROL_RESET_MASK		(1 << (0))
#define STATUS_CONTROL_ENABLE			(1 << (1))
#define STATUS_CONTROL_ENABLE_OFFSET	(1)
#define STATUS_CONTROL_ENABLE_MASK		(1 << (1))

#define AMPLUTE_OFFSET		0
#define FREQUENCY_OFFSET	1

using namespace std; 



struct regs {
	volatile uint32_t samples;
	volatile uint32_t rate;
	volatile uint32_t scale;
	volatile uint32_t status_control;
};

void dump_regs(struct regs* ioregs);
unsigned int do_rate(unsigned int rate);




//////////////////////////////////////////////////////////////////

int main(void) {
	int fd1,fd2, ret = EXIT_FAILURE;
	struct regs* ioregs;
	volatile uint32_t* bram_2;
	uint32_t rate, scale;
	
	
	ssize_t offset;
    	unsigned int values[2];
    	

	if((fd1 = open("/dev/audioctl0", O_RDWR)) < 0) {
		perror("open()");
		return EXIT_FAILURE;
	}
	if((fd2 = open("/dev/hssi", O_RDWR)) < 0) {	//used for streaming in hssi data
		perror("open()");
		return EXIT_FAILURE;
	}
	
	/*
	if((fd3 = open("/dev/mem", O_RDWR)) < 0) {
		perror("open()");
		return EXIT_FAILURE;
	}
	*/
	
	ioregs = (struct regs*)mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, fd1, 0);

	if(ioregs == MAP_FAILED) {
		perror("mmap()");
		close(fd1);
		//goto err_mmap;
		// use LEDs to signal a failure
		return EXIT_FAILURE;
	}
	
	dump_regs(ioregs);
	
	ioregs->status_control = STATUS_CONTROL_RESET;	/* reset the core */
	ioregs->status_control = 0;
	
	ioregs->samples = 100;		/* if audioctl0's write() function is fixed
					 * this is not needed
					 */
	ioregs->status_control = STATUS_CONTROL_ENABLE;				/* enable the core */

	printf("\nafter setup\n");
	dump_regs(ioregs);
			

			
	int flag=0;
    	
    	const int upperCutoff=7000;
   	const int lowerCutoff=4000;
   	int temp; 		//temp value that will be used for log file output
   	
   	
   	
   	
   	
   	//ofstream logFile;	//used to display results of testing. 
   	
   	//string ampStatus;	//used to display if readings are in range or not. Used for testing and writing log file. 
   	//string freqStatus;
   	
   	
    	
    	//logFile.open("/home/kchai/Desktop/pmodReadingFiles/logFile.txt",ios::trunc);
    	
    	// open as binary file
   	//ifstream hssi("/dev/hssi",ios::binary);  
   

    		//rate = do_rate(rate/8);
		//ioregs->rate = rate;
		
		
   

    while(true){	
    
 	//logFile.open("/home/kchai/Desktop/pmodReadingFiles/logFile.txt",ios::trunc);
	


	// for(size_t count = 0; count < 10; count++) {
        /* read is not guaranteed to get you the amount of data you requested,
         * you need to explicitly check for this condition
         * we read until we have sizeof(values) bytes read
         */
        for(ssize_t offset = 0, tmp = 0;			/*making sure that I am getting all of the data from the read function*/
        
                        offset < sizeof(values);
                        offset += (tmp = read(
                                    fd2,
                                    values + offset,
                                    sizeof(values) - offset))) {

            if(tmp < 0) {
                /* if read() returned a negative value, it had an error */
                perror("read()");
                goto err_read;
            }
        }
        /* print the values */
        //printf("%u %u\n", values[0], values[1]);
        
        AMPLITUDE=values[AMPLITUDE_OFFSET];		//need to confirm order
        Hz=values[FREQUENCY_OFFSET];
      //}



	if ( (AMPLITUDE >= lowerCutoff && AMPLITUDE <= upperCutoff) && (Hz >= lowerCutoff && Hz <= upperCutoff) )		//if both pmod readings are in range
	
		{
	
			ampStatus= "in range";		//global values within this loops scope. 
			freqStatus= "in range";
		
			//keep these as notes for other program
    			//paired with ofstream logic
    			//hssi << AMPLITUDE << Hz;
    			//hssi.flush();
    			
    			ioregs-> status_control = STATUS_CONTROL_ENABLE;
    			
    			rate = do_rate(Hz/8);
			ioregs->rate = rate;
    			
    			/*scale=do_scale(AMPLITUDE/8); */
    			/*ioregs -> scale = 		PASS THROUGH CONVERSION FUNCTION !!!! ( AMPLITUDE ); */
    			
			flag =1;				//signals that you have completed start up condition
		}
		
	
    	else if	( !(AMPLITUDE >= lowerCutoff && AMPLITUDE <= upperCutoff) && (Hz >= lowerCutoff && Hz <= upperCutoff) && flag==1)
	
		{
			//if AMPLITUDE isn't in range but Hz is and you have already performed your startup procedure. 
			
			//limit AMPLITUDE to either upper or lower cutoff. Stream Hz values as usual 
		
		
		
			if ( AMPLITUDE < lowerCutoff)		// cap at lowerCutoff		NOTE: may not need <=, could just check for < at this point. originally <=
			
				{
					
					
					temp=AMPLITUDE;

					AMPLITUDE=lowerCutoff;		 //override current amplitude value read in from file with value of lowerCutoff
									// current Hz value read in from file remains unchanged . Value of freqStatus remains unchanged. ******
									
					ampStatus="capped at  lower cutoff: amplitude before: " + to_string(temp) + " amplitude capped: "+ to_string(AMPLITUDE);			
					
					ioregs-> status_control = STATUS_CONTROL_ENABLE;				
    					
    				  	rate = do_rate(Hz/8);
					ioregs->rate = rate;
					
					
    			
    					/*scale=do_scale(AMPLITUDE/8); */
    					/*ioregs -> scale = 		PASS THROUGH CONVERSION FUNCTION !!!! ( AMPLITUDE ); */

				}
			

		
			else if (AMPLITUDE > upperCutoff)		//cap at upperCutoff		note: originally >= 
				{	
				
					
					temp=AMPLITUDE;

					AMPLITUDE=upperCutoff;		//override current amplitude value read in from file with value of upperCutoff
					
					ampStatus="capped at  upper cutoff: amplitude before: "+to_string(temp)+" amplitude capped: "+to_string(AMPLITUDE);
					
					ioregs-> status_control = STATUS_CONTROL_ENABLE;
					
					rate = do_rate(Hz/8);
					ioregs->rate = rate;
    			
    					/*scale=do_scale(AMPLITUDE/8); */
    					/*ioregs -> scale = 		PASS THROUGH CONVERSION FUNCTION !!!! ( AMPLITUDE ); */
					
					
				}
	
	
	
		}
		
	else if	( (AMPLITUDE >= lowerCutoff && AMPLITUDE <= upperCutoff) && !(Hz >= lowerCutoff && Hz <= upperCutoff) && flag==1)

		{
	
			//if Hz ins't in range but AMPLITUDE is and you have already performed your startup procedure. 
			
			// limit Hz to either upper of lower cutoff. Stream AMPLITUDE values as usual
			
			

			if ( Hz < lowerCutoff)	// cap at lowerCutoff
				{	

					temp=Hz;

					Hz=lowerCutoff;

					freqStatus="capped at  lower cutoff: Frequency before: "+to_string(temp)+" Frequency capped: "+to_string(Hz);
		
					ioregs-> status_control = STATUS_CONTROL_ENABLE;
					
					rate = do_rate(Hz/8);
					ioregs->rate = rate;
    			
    					/*scale=do_scale(AMPLITUDE/8); */
    					/*ioregs -> scale = 		PASS THROUGH CONVERSION FUNCTION !!!! ( AMPLITUDE ); */
					
				}
			

			else if (Hz > upperCutoff)	//cap at upperCutoff
				{
					
					

					temp=Hz;

					Hz=upperCutoff;		

					freqStatus="capped at  upper cutoff: Frequency before: "+to_string(temp)+" Frequency capped: "+to_string(Hz);
					
					ioregs-> status_control = STATUS_CONTROL_ENABLE;
					
					
					rate = do_rate(Hz/8);
					ioregs->rate = rate;
    			
    					/*scale=do_scale(AMPLITUDE/8); */
    					/*ioregs -> scale = 		PASS THROUGH CONVERSION FUNCTION !!!! ( AMPLITUDE ); */
								
					
				} 
	
	
		}
		
	
	else	{		//if neitherof the pmods are in range return to neutral starting condition
	
			
			
			// don't call sound creation function at all. Lack of sound creation function = lack of sound
		

			 ampStatus= " Idle";		//values carried over into next loop logic until they have a reason to change. Global values within this loop. 
                        freqStatus= "Idle";
			 
			 //b.wait();
			 //DO NOTHING DURING THIS STEP	

			flag =0; 
		
			ioregs->status_control &= ~STATUS_CONTROL_ENABLE;
			//do nothing until you detect starting procedure. 
			
			
			//would I need to do something like this?
			
			//NOW WHAT I WANT TO DO IS CHANGE THE STATUS OF THE STATUS AND CONTROL BIT TO DISABLE IT THINGS
			//THIS IS MY NEW "DO NOTHING" LOGIC
			
			
	
		}



	//cout<<"amplitude:  "<< AMPLITUDE <<"   "<< ampStatus<<" 		frequency:  "<< Hz<<"   "<<freqStatus<<endl;
	//logFile<<"amplitude:  "<< AMPLITUDE <<"   "<< ampStatus<<" 		frequency:  "<< Hz<<"   "<<freqStatus<<endl;
	
	//logFile.close();

    	
    }

	
    	//logFile.close();


	
	ret = EXIT_SUCCESS;
	
//not sure about these
	return ret;
}


//function definitions

void dump_regs(struct regs* ioregs) {
	printf(
			"register dump"			"\n"
			"--------------"		"\n"
			"rate:\t\t%08x"			"\n"
			"scale:\t\t%08x"		"\n"
			"samples:\t%08x"		"\n"
			"status:\t\t%08x"		"\n",
			ioregs->rate, ioregs->scale,
			ioregs->samples, ioregs->status_control);
}

#define RATE_TOP	(7000/8)
#define RATE_BOTTOM	(4100/8)

uint32_t do_rate(uint32_t rate) {
	if(rate > RATE_TOP) {
		rate = RATE_TOP;
	} else if(rate < RATE_BOTTOM) {
		rate = RATE_BOTTOM;
	}
	
	int64_t rate_new = rate;
	
	/* scale */
	rate_new = 8*(1412 * rate_new)/1000 - 1694; //10519;
	return rate_new;
}






































